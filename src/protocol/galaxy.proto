package baidu.galaxy.proto;

//////////////////////////////////////////
////////user
//////////////////////////////////////////
message User {
    optional string user = 1;
    optional string token = 2;
}

message Quota {
    optional int64 millicore = 1;
    optional int64 memory = 2;
    optional int64 disk = 3;
    optional int64 ssd  = 4;
    optional int64 replica = 5;
}

enum Authority {
    // job
    kAuthorityCreateContainer = 1;
    kAuthorityRemoveContainer = 2;
    kAuthorityUpdateContainer = 3;
    kAuthorityListContainer = 4;

    kAuthoritySubmitJob = 5;
    kAuthorityRemoveJob = 6;
    kAuthorityUpdateJob = 7;
    kAuthorityListJobs = 8;

    // pool

    // tag

    // auhority
}

enum AuthorityAction {
    kActionAdd = 1;
    kActionRemove = 2;
    kActionSet = 3;
    kActionClear = 4;
}

message Grant {
    optional User user = 1;
    repeated string pool = 2;
    optional AuthorityAction action = 3;
    repeated Authority authority = 4;
}


///////////////////////////////////////////
///// resource
///////////////////////////////////////////
message CpuResource {
    optional int64 total = 1;
    optional int64 assigned = 2;
    optional int64 used = 3;
}

message MemoryResource {
    optional int64 total = 1;
    optional int64 assigned = 2;
    optional int64 used = 3;
}

enum VolumMedium {
    kSsd = 1;
    kDisk = 2;
    kBfs = 3;
    kTmpfs = 4;
}

message Volum {
    optional string path = 1;
    optional int64 size = 2;
    optional VolumMedium medium = 3;
}

message VolumResource {
    repeated Volum total = 1;
    repeated Volum assigned = 2;
    repeated Volum used = 3;
}

message CpuRequired {
    optional int64 milli_core = 1;
    optional bool excess = 2;
}

message MemoryRequired {
    optional int64 size = 1;
    optional bool excess = 2;
}

message TcpthrotRequired {
    optional int64 recv_bps_quota = 1;
    optional bool recv_bps_excess = 2;
    optional int64 send_bps_quota = 3;
    optional bool send_bps_excess = 4;
}

message BlkioRequired {
    optional int32 weight = 1;
}

// dynamic port ?, only one port?
// report resource
message PortRequired {
    optional string port_name = 1;
    optional string port = 2;       // "dynamic" or num
}

enum VolumType {
    KEmptyDir = 1;  
    KHostDir = 2;
}

message VolumRequired {
    optional int64 size = 1;
    optional VolumType type = 2;
    optional VolumMedium medium = 3;
    optional string source_path = 4;  // bind source_path --> dest_path
    optional string dest_path = 5;    
    optional bool readonly = 6;       // default: false
    optional bool exclusive = 7;      // default: false
    optional bool use_symlink = 8;    // use symlink or not, workspace dir use symlink default
}

/////////////////////////////////////////
///// Job
/////////////////////////////////////////
enum JobType {
    kJobBatch = 1;
    kJobService = 2;
    kJobMonitor = 3;
}

// update incrementally may cause new problems: version confusion 
// Appmaster must save descrition of last 2 versions, and  a complete desc.
enum JobStatus {
   kJobPending = 1; 
   kJobRunning = 2;
   kJobFinished = 3; 
   kJobDestroying = 4;
}


// Task or pod
enum PodStatus {
    kPodPending = 1;
    kPodDeploying = 2;
    kPodReady = 3;     // empty container
    kPodStarting = 4;
    kPodServing = 5;
    kPodFailed = 6;
    kPodFinished = 7;
}

enum TaskStatus {
    kTaskPending = 1;
    kTaskDeploying = 2;
    kTaskStarting = 3;
    kTaskServing = 4;
    kTaskFailed = 5;
    kTaskFinished = 6;
}

message Package {
    optional string source_path = 1; // support nfs/hdfs/ftp
    optional string dest_path = 2;   // local path
}
message ImagePackage {
    optional Package package = 1;
    optional string pre_cmd = 2;     // executed befor overwriting the old package, eg: stop service
    optional string post_cmd = 3;    // execute after overwriting the old package, eg: start service
}

message DataPackage {
    repeated Package packages = 1;
    optional string pre_cmd = 2;     // 
    optional string post_cmd = 3;    // 
}

message Deploy {
    optional uint32 replica = 1;
    optional uint32 step = 2;
    optional uint32 interval = 3;
    optional uint32 max_per_host = 4;
}

message Service {
    optional string service_name = 1;  // must be uniq, which is guaranteed by user
    optional string port_name = 2;     // name
    optional bool use_bns = 3;
}

message TaskId {
    optional string id = 1;
}

message TaskDescription {
    // set by user or by 
    optional TaskId id = 1;
    // resource
    optional CpuRequired cpu = 2;
    optional MemoryRequired memory = 3;
    repeated PortRequired ports = 4;

    // package
    optional ImagePackage exe_package = 5;
    optional DataPackage data_package = 6;

    // service
    repeated Service services = 7;
}

message JobId {
    optional string id = 1;
}

// user -> resource manager
message PodDescription {
    // workspace volum
    optional VolumRequired workspace_volum = 3;

    // Resource, volum is owned by Pod
    repeated VolumRequired data_volums = 4;
    
    // tasks 
    repeated TaskDescription tasks = 5;

    // schedule-policy is necessary ?
}

message JobDescription {
    // Job
    optional string name = 1;
    optional JobType type = 2;

    optional Deploy deploy = 3;
    optional PodDescription job_desc = 4;
}


///////////////////////////////////////
////container
///////////////////////////////////////

message Cgroup {
   optional string id = 1; 
   optional CpuRequired cpu = 2;
   optional MemoryRequired memory = 3;
   optional TcpthrotRequired tcp_throt = 4;
   optional BlkioRequired blkio = 5;
}

// resource manager -> agent
message ContainerDescription {
   // optional ContainerGroup = 1; 
   // optional ContainerId id = 2;
    optional string run_user = 1;
    optional VolumRequired workspace_volum = 3;
    repeated VolumRequired data_volums = 4;      //
    optional string cmd_line = 5;                // appmaster or appwork
    repeated Cgroup cgroups = 6;
}


enum ContainerStatus {
    kContainerPending = 1;    // in pending queue
    kContainerIniting = 2;    // initing
    kContainerReady = 3;      // ready, no process in container 
    kContainerError = 4;      // an error occure
    kContainerDestroying = 5; // 
    kContainerFinished = 6;   // released by resource manager
}

// agent -> manager
message ContainerInfo {
    optional string id = 1; 
    optional int64 created_time = 2;
    optional ContainerStatus status = 3; 

    // resource?
    
    // statistics, eg: error cnt or other exceptions
}

///////////////////////////////////////
////status
///////////////////////////////////////
enum Status {
   kOk = 1; 
}

message ErrorCode {
    optional Status status = 1;
    optional string reason = 2;
}

// agent -> resource manager
message AgentInfo {
    // agent version

    // host healthy

    // container
    repeated ContainerInfo container_info = 1;

    // resource
    optional CpuResource cpu_resoruce = 2;
    optional MemoryResource memory_resource = 3;
    repeated VolumResource volum_resources = 4;

    // exception statistics, eg: failed num of pod ..
}
